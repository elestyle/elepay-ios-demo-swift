// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name ElepaySDK
import AdSupport
import CoreLocation
@_exported import ElepaySDK
import Foundation
import SafariServices
import Swift
import UIKit
import WebKit
public struct ElepayCardParams {
  public var number: Swift.String?
  public var expMonth: Swift.UInt
  public var expYear: Swift.UInt
  public var cvc: Swift.String?
  public var name: Swift.String?
  public var address: Swift.String?
  public var currency: Swift.String?
  public func last4() -> Swift.String?
}
extension ElepayPaymentAppHelper {
  final public func deviceSupportsApplePay() -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class ElepayPaymentAppHelper {
  @objc deinit
}
extension ElepayPaymentAppHelper {
  final public func isLinePayInstalled() -> Swift.Bool
}
extension ElepayPaymentAppHelper {
  final public func isPayPayInstalled() -> Swift.Bool
}
extension Elepay {
  public static func checkout(checkoutJSONString: Swift.String, from viewController: UIKit.UIViewController, resultHandler: @escaping ElepaySDK.ElepayResultHandler)
  public static func checkout(checkoutJSONData: Foundation.Data, from viewController: UIKit.UIViewController, resultHandler: @escaping ElepaySDK.ElepayResultHandler)
  public static func checkout(checkoutJSON: [Swift.String : Any], from viewController: UIKit.UIViewController, resultHandler: @escaping ElepaySDK.ElepayResultHandler)
}
extension Elepay {
  public static func handleSource(sourceJSON: Swift.String, cardParams: ElepaySDK.ElepayCardParams? = nil, viewController: UIKit.UIViewController, completion: @escaping ElepaySDK.ElepayResultHandler) -> Swift.Bool
  public static func handleSource(sourceData: Foundation.Data, cardParams: ElepaySDK.ElepayCardParams? = nil, viewController: UIKit.UIViewController, completion: @escaping ElepaySDK.ElepayResultHandler) -> Swift.Bool
  public static func handleSource(source: [Swift.String : Any], cardParams: ElepaySDK.ElepayCardParams? = nil, viewController: UIKit.UIViewController, completion: @escaping ElepaySDK.ElepayResultHandler) -> Swift.Bool
}
@available(iOS 13, *)
extension Elepay {
  public static var userInterfaceStyle: UIKit.UIUserInterfaceStyle
}
public typealias ElepayResultHandler = (ElepaySDK.ElepayResult) -> Swift.Void
@_hasMissingDesignatedInitializers final public class Elepay {
  public static let shared: ElepaySDK.Elepay
  final public let paymentAppHelper: ElepaySDK.ElepayPaymentAppHelper
  public static var isInitialized: Swift.Bool {
    get
  }
  public static var initializing: Swift.Bool
  public static var isMakingPayments: Swift.Bool {
    get
  }
  public static var appKey: Swift.String {
    get
  }
  public static func initApp(key: Swift.String, apiURLString: Swift.String? = nil)
  public static func handlePayment(chargeJSON: Swift.String, cardParams: ElepaySDK.ElepayCardParams? = nil, viewController: UIKit.UIViewController, completion: @escaping ElepaySDK.ElepayResultHandler) -> Swift.Bool
  public static func handlePayment(chargeData: Foundation.Data, cardParams: ElepaySDK.ElepayCardParams? = nil, viewController: UIKit.UIViewController, completion: @escaping ElepaySDK.ElepayResultHandler) -> Swift.Bool
  public static func handlePayment(charge: [Swift.String : Any], cardParams: ElepaySDK.ElepayCardParams? = nil, viewController: UIKit.UIViewController, completion: @escaping ElepaySDK.ElepayResultHandler) -> Swift.Bool
  public static func handleOpenURL(_ url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  public static func handleUniversalLink(_ application: UIKit.UIApplication, continue userActivity: Foundation.NSUserActivity, restorationHandler: @escaping ([Any]?) -> Swift.Void) -> Swift.Bool
  @objc deinit
}
extension ElepayPaymentAppHelper {
  final public func isRPayInstalled() -> Swift.Bool
  final public func downloadRPay()
}
extension ElepayPaymentAppHelper {
  final public func isAuPayInstalled() -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class ElepayLocalization {
  public static let shared: ElepaySDK.ElepayLocalization
  @objc deinit
}
extension ElepayLocalization {
  final public func switchLanguage(code: ElepaySDK.ElepayLanguageCode)
  final public func isLocalized(for languageCode: ElepaySDK.ElepayLanguageCode) -> Swift.Bool
  final public func isLocalized(for languageCode: ElepaySDK.ElepayLanguageCode, keys: [Swift.String]) -> Swift.Bool
}
extension ElepayPaymentAppHelper {
  final public func isWeChatPayInstalled() -> Swift.Bool
}
public enum ElepayResult : Swift.CustomDebugStringConvertible {
  case succeeded(id: Swift.String)
  case failed(id: Swift.String?, error: ElepaySDK.ElepayError)
  case cancelled(id: Swift.String)
  public var debugDescription: Swift.String {
    get
  }
}
public enum ElepayError : Swift.Error {
  case unsupportedPaymentMethod(errorCode: Swift.String, paymentMethod: Swift.String)
  case alreadyMakingPayment(id: Swift.String)
  case invalidPayload(errorCode: Swift.String, message: Swift.String)
  case paymentMethodNotInitialized(errorCode: Swift.String, message: Swift.String)
  case systemError(errorCode: Swift.String, message: Swift.String)
  case serverError(errorCode: Swift.String, message: Swift.String)
  case paymentFailure(errorCode: Swift.String, message: Swift.String)
  public var errorCode: Swift.String? {
    get
  }
}
extension ElepayError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum ElepayLanguageCode : Swift.String {
  case simplifiedChinese
  case english
  case traditionalChinese
  case japanese
  case system
  public init(stringPresentation: Swift.String)
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension ElepaySDK.ElepayLanguageCode : Swift.Equatable {}
extension ElepaySDK.ElepayLanguageCode : Swift.Hashable {}
extension ElepaySDK.ElepayLanguageCode : Swift.RawRepresentable {}
